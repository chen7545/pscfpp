TODO (pspg GPU code):

Clean up of kernel functions
-------------------------------------------------------------------------

1) Comment out (first) then erase (second) unused kernels.
   Some are found in solvers/Block.tpp and (possibly?) math/Helpers.cu
   (From Ryan: definitely some in math/Helpers.cu!)

2) Replace scaleRealData in fieldFFT.tpp by function from linearAlgebra

3) Consider moving FFTBatched.tpp/scaleComplexData to linearAlgebra

4) Consider moving some pointwise multiplication functions from Block
   to LinearAlgebra, including those that operate on complex data.

5) Move parallel reduction kernels to private namespace in implementation
   of kernel wrappers, so not publically visible. 

6) Establish more consistent function name conventions.

   One possibile set of semantic units for vector operations:

       LHS (result):
       rV - real vector
       cV - complex vector

       Pointwise binary Operations:
       Sub   -> subtraction
       Add   -> addition
       Mul   -> pointwise multiplication
       Div   -> pointwise division

       Assignment:
       Eq     -> assignment
       Eq(Op) -> assignment to first vector operand

       RHS operands:
       V   -> vector on rhs (same as LHS by default)
       R   -> real vector with same value for all elements
       C   -> complex Vector with same value for all elements
       r   -> real prefactor multiplying all elements
       c   -> complex prefactor multiplying all elements
       Vr  -> Vector multiplied by real prefactor
       Vc  -> Vector multiplied by complex prefactor

       In what follows: A, B, C are vectors, while a, b are scalars 

       Simple Assignment:

       C = A        :  rV_EqV   (vector assignment)
       C = R        :  rV_EqR   (assign all elements same value)

       Pointwise Binary operations C = A Op B have form C_OpAB (two arguments)

       C = A + B    :   rV_AddVV
       C = A - B    :   rV_SubVV
       C = A + R    :   rV_AddVR
       C = A - R    :   rV_SubVR
       C = A * B    :   rV_MulVV   (element-wise multiplication)
       C = A / B    :   rV_DivVV   (element-wise division)
       C = Aa + Bb  :   rV_AddVrVr
       C = A + Bb   :   rV_AddVVr

       Increment operations A = A Op B have form A_EqOpB 
       (First operand must be a vector, same address as the LHS)

       A = A + B    :   rV_EqAddV
       A = A - B    :   rV_EqSubV
       A = A + R    :   rV_EqAddR   (pointwise add same value to all elements)
       A = A - R    :   rV_EqSubR   (pointwise sub same value from all)
       A = A*r      :   rV_EqMulr
       A = A + aB   :   rV_EqAddVr

       Corresponding functions that return a complex-valued vector
       will start with cV. Arguments on the RHS side will use C for a 
       complex vector with the same value for all elements, V for a 
       complex vector, U for a real vector, c for a complex scalar that
       multiplies a vector, c for a complex scalar that multiplies a
       vector.

Kernel Functions

       Kernel functions can use names as described above, but with
       prefix _ to indicate a kernel, e.g., _rV_EqV. 

       Analogous names can be used for __global__ CUDA kernels (called 
       with <<< >>> syntax) and for corresponding C++ __host__ 
       functions that act on pointers or array containers.

   Example kernel names (called with CUDA <<< ... >>> ) syntax

       // Binary operations (vrAOpB => v = A Op B)
       pointWiseBinaryAdd       -> _rV_AddVV
       pointWiseBinarySubtract  -> _rV_SubVV

       // Unary operations (vrOpA => v = v Op A)
       subtractUniform          -> _rV_EqSubR
       addUniform               -> _rV_EqAddR
       pointWiseAdd             -> _rV_EqAddV
       pointWiseSubtract        -> _rV_EqSubV
       scaleReal                -> _rV_EqMulR
       scaleComplex             -> _cV_EqMulC

       // Assignment operations (LHS = 
       assign uniform           -> rV_EqR__
       assign vector            -> rV_EqV__
       assign exp of vector     -> rV_ExpV__

       Corresponding functions that return a complex-valued vector
       will start with vc. Arguments on the RHS side will use C for
       complex scalar, R for real scalar, V for complex vector and
       Vr for real vector.

       Overloaded versions of wrapper functions will be provided for
       pointers, for which size must be provided as a parameter, and 
       for field containers, for which size is provided by container.

       Parameter order same as in order of equation (lhs first).

    Example wrapper function for reductions:

       reduceSum
       reduceAbMax

       Corresponding kernel names have suffix __ 

       Overloaded versions of wrappers for pointers and containers,
       in which thread grid is computed internally.
       Versions for pointers take the size as a parameter.

6) Rename files:

       LinearAlgebra  -> VectorOps
       KernelWrappers -> Reductions (both kernels and C++ wrappers)

       Provide overloaded operations for field containers in 
       directories or files that define containers

       Move Helpers to pscf/gpu
      
